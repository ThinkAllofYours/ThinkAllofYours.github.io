"use strict";(self.webpackChunkthink_allof_yours_github_io=self.webpackChunkthink_allof_yours_github_io||[]).push([[1651],{9910:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"algorithm/Last_Stone_Weight","title":"\ud83d\ude80 1046. \ub9c8\uc9c0\ub9c9 \ub3cc\uc758 \ubb34\uac8c","description":"\ub9c8\uc9c0\ub9c9 \ub3cc\uc758 \ubb34\uac8c","source":"@site/docs/algorithm/1046_Last_Stone_Weight.mdx","sourceDirName":"algorithm","slug":"/algorithm/1046_last_stone_weight","permalink":"/docs/algorithm/1046_last_stone_weight","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/algorithm/1046_Last_Stone_Weight.mdx","tags":[{"inline":true,"label":"algorithm","permalink":"/docs/tags/algorithm"},{"inline":true,"label":"heap","permalink":"/docs/tags/heap"}],"version":"current","sidebarPosition":1046,"frontMatter":{"slug":"1046_last_stone_weight","title":"\ud83d\ude80 1046. \ub9c8\uc9c0\ub9c9 \ub3cc\uc758 \ubb34\uac8c","authors":["bundabergman"],"tags":["algorithm","heap"]},"sidebar":"docsSidebar","previous":{"title":"\ud83d\ude80 944. Delete Columns to Make Sorted","permalink":"/docs/algorithm/944_delete_columns_to_make_sorted"},"next":{"title":"\ud83d\ude80 1962.\xa0Remove Stones to Minimize the Total","permalink":"/docs/algorithm/1962_remove_stones_to_minimize_the_total"}}');var i=s(4848),l=s(8453);const o={slug:"1046_last_stone_weight",title:"\ud83d\ude80 1046. \ub9c8\uc9c0\ub9c9 \ub3cc\uc758 \ubb34\uac8c",authors:["bundabergman"],tags:["algorithm","heap"]},r=void 0,a={},h=[{value:"\ub9c8\uc9c0\ub9c9 \ub3cc\uc758 \ubb34\uac8c",id:"\ub9c8\uc9c0\ub9c9-\ub3cc\uc758-\ubb34\uac8c",level:2},{value:"\ubb38\uc81c \uc124\uba85",id:"\ubb38\uc81c-\uc124\uba85",level:2},{value:"\uc608\uc81c 1:",id:"\uc608\uc81c-1",level:3},{value:"\uc608\uc81c 2:",id:"\uc608\uc81c-2",level:3},{value:"\uc81c\uc57d \uc870\uac74:",id:"\uc81c\uc57d-\uc870\uac74",level:3},{value:"\ud574\uacb0 \ubc29\ubc95",id:"\ud574\uacb0-\ubc29\ubc95",level:2},{value:"\uc124\uba85",id:"\uc124\uba85",level:3},{value:"\ucc38\uace0 \uc790\ub8cc",id:"\ucc38\uace0-\uc790\ub8cc",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"\ub9c8\uc9c0\ub9c9-\ub3cc\uc758-\ubb34\uac8c",children:"\ub9c8\uc9c0\ub9c9 \ub3cc\uc758 \ubb34\uac8c"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/last-stone-weight/description/",children:"Last Stone Weight - LeetCode"})}),"\n",(0,i.jsx)(n.h2,{id:"\ubb38\uc81c-\uc124\uba85",children:"\ubb38\uc81c \uc124\uba85"}),"\n",(0,i.jsx)(n.p,{children:"\uc815\uc218 \ubc30\uc5f4 stones\uac00 \uc8fc\uc5b4\uc9c0\uba70, stones[i]\ub294 i\ubc88\uc9f8 \ub3cc\uc758 \ubb34\uac8c\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4."}),"\n",(0,i.jsx)(n.p,{children:"\uc6b0\ub9ac\ub294 \ub3cc\uc744 \uac00\uc9c0\uace0 \uac8c\uc784\uc744 \ud569\ub2c8\ub2e4. \ub9e4 \ud134\ub9c8\ub2e4 \uac00\uc7a5 \ubb34\uac70\uc6b4 \ub450 \uac1c\uc758 \ub3cc\uc744 \uc120\ud0dd\ud558\uc5ec \uc11c\ub85c \ubd80\ub52a\ud799\ub2c8\ub2e4. x\uc640 y\ub97c \uac01\uac01 \ub450 \ub3cc\uc758 \ubb34\uac8c\ub77c\uace0 \ud560 \ub54c (x \u2264 y), \ubd80\ub52a\ud78c \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\ub9cc\uc57d x == y\ub77c\uba74, \ub450 \ub3cc \ubaa8\ub450 \ud30c\uad34\ub429\ub2c8\ub2e4."}),"\n",(0,i.jsx)(n.li,{children:"\ub9cc\uc57d x != y\ub77c\uba74, x \ubb34\uac8c\uc758 \ub3cc\uc740 \ud30c\uad34\ub418\uace0, y \ubb34\uac8c\uc758 \ub3cc\uc740 y - x\uc758 \uc0c8\ub85c\uc6b4 \ubb34\uac8c\ub97c \uac16\uac8c \ub429\ub2c8\ub2e4."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"\uac8c\uc784\uc774 \ub05d\ub0a0 \ub54c\ub294 \ucd5c\ub300 \ud55c \uac1c\uc758 \ub3cc\ub9cc \ub0a8\uac8c \ub429\ub2c8\ub2e4."}),"\n",(0,i.jsx)(n.p,{children:"\ub9c8\uc9c0\ub9c9\uc5d0 \ub0a8\uc740 \ub3cc\uc758 \ubb34\uac8c\ub97c \ubc18\ud658\ud558\uc138\uc694. \ub0a8\uc740 \ub3cc\uc774 \uc5c6\ub2e4\uba74 0\uc744 \ubc18\ud658\ud558\uc138\uc694."}),"\n",(0,i.jsx)(n.h3,{id:"\uc608\uc81c-1",children:"\uc608\uc81c 1:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\uc785\ub825: stones = [2,7,4,1,8,1]\n\ucd9c\ub825: 1\n\uc124\uba85: \n7\uacfc 8\uc744 \ubd80\ub52a\ud600\uc11c 1\uc774 \ub418\uc5b4 \ubc30\uc5f4\uc740 [2,4,1,1,1]\uc774 \ub429\ub2c8\ub2e4.\n2\uc640 4\ub97c \ubd80\ub52a\ud600\uc11c 2\uac00 \ub418\uc5b4 \ubc30\uc5f4\uc740 [2,1,1,1]\uc774 \ub429\ub2c8\ub2e4.\n2\uc640 1\uc744 \ubd80\ub52a\ud600\uc11c 1\uc774 \ub418\uc5b4 \ubc30\uc5f4\uc740 [1,1,1]\uc774 \ub429\ub2c8\ub2e4.\n1\uacfc 1\uc744 \ubd80\ub52a\ud600\uc11c 0\uc774 \ub418\uc5b4 \ubc30\uc5f4\uc740 [1]\uc774 \ub418\uace0, \uc774\uac83\uc774 \ub9c8\uc9c0\ub9c9 \ub3cc\uc758 \ubb34\uac8c\uc785\ub2c8\ub2e4.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"\uc608\uc81c-2",children:"\uc608\uc81c 2:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\uc785\ub825: stones [1]\n\ucd9c\ub825: 1\n"})}),"\n",(0,i.jsx)(n.h3,{id:"\uc81c\uc57d-\uc870\uac74",children:"\uc81c\uc57d \uc870\uac74:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"- 1 <= stones.length <= 30\n- 1 <= stones[i] <= 1000\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\ud574\uacb0-\ubc29\ubc95",children:"\ud574\uacb0 \ubc29\ubc95"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        while stones and stones[-1]:\n            stones = heapq.nsmallest(len(stones), stones)\n            if len(stones) == 1:\n                return stones.pop()\n            elif len(stones) == 2:\n                return stones.pop() - stones.pop()\n            item1 = stones.pop()\n            item2 = stones.pop()\n            if item1 - item2 is not 0:\n                stones.append(item1 - item2)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\uacb0\uacfc runtime : 30ms ",(0,i.jsx)(n.strong,{children:"96.20%"})]}),"\n",(0,i.jsx)(n.p,{children:"\uadfc\ub370 \uc774\ub807\uac8c \uc0ac\uc6a9\ud558\ub294\uac70\uba74 \uadf8\ub0e5 sort\uc4f0\ub294\uac8c \ub9de\uc9c0 \uc54a\ub098 \uc0dd\uac01?"}),"\n",(0,i.jsx)(n.p,{children:"\ub2e4\ub978 \uc0ac\ub78c\ub4e4\uc740 \uc5b4\ub5bb\uac8c \ud480\uc5c8\ub098 \ud655\uc778\ud574\ubcf4\ub2c8"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        stones = [-stone for stone in stones]\n        heapq.heapify(stones)\n        while len(stones) > 1:\n            y = heapq.heappop(stones)\n            x = heapq.heappop(stones)\n            if x != y:\n                heapq.heappush(stones, y - x)\n        return -stones[0] if stones else 0\n"})}),"\n",(0,i.jsx)(n.p,{children:"\ub2e4\ub978 \uc0ac\ub78c\ub4e4\uc774 \ud47c \uacb0\uacfc\ub294 \uc774\ub807\ub2e4."}),"\n",(0,i.jsx)(n.p,{children:"\uadf8\ub7ec\ub2c8\uae4c heapq\ub294 \ubaa8\ub4c8\uc774\uace0 \uadf8\uac78 \uadf8\ub300\ub85c \ud65c\uc6a9\ud558\ub294\ub370 \uc694\uc18c\ub4e4\uc758 \uac12\uc744 \ub2e4 \ub9c8\uc774\ub108\uc2a4\ub85c \ubc14\uafb8\uace0 \ub9c8\uc774\ub108\uc2a4\ub85c \ubc14\ub010 \uc694\uc18c\ub97c \ud799 \uc815\ub82c\ud574\ubc84\ub9ac\uba74 \ud070\uc218\ub300\ub85c \uc774\uc9c4\ud2b8\ub9ac\ub85c \uc815\ub82c\ub418\uace0 \ucd5c\uc885 \uacb0\uacfc\uc5d0 -\ub9cc \ubd99\uc5ec\uc11c \ubc18\uc601\ud558\uba74 \ub428"}),"\n",(0,i.jsx)(n.h3,{id:"\uc124\uba85",children:"\uc124\uba85"}),"\n",(0,i.jsx)(n.p,{children:"\uc774 \ud574\uacb0\ubc29\ubc95\uc740 Python\uc758 heapq \ubaa8\ub4c8\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"\ubaa8\ub4e0 \ub3cc\uc758 \ubb34\uac8c\ub97c \uc74c\uc218\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4 (\ucd5c\ub300 \ud799\uc744 \uad6c\ud604\ud558\uae30 \uc704\ud574)"}),"\n",(0,i.jsx)(n.li,{children:"heapify\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud799\uc73c\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4"}),"\n",(0,i.jsxs)(n.li,{children:["\ub3cc\uc774 2\uac1c \uc774\uc0c1 \ub0a8\uc544\uc788\ub294 \ub3d9\uc548:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\uac00\uc7a5 \ud070 \ub450 \ub3cc\uc744 \uaebc\ub0c5\ub2c8\ub2e4 (\uc74c\uc218\uc774\ubbc0\ub85c \uc2e4\uc81c\ub85c\ub294 \uac00\uc7a5 \uc791\uc740 \uac12)"}),"\n",(0,i.jsx)(n.li,{children:"\ub450 \ub3cc\uc758 \ucc28\uc774\uac00 \uc788\ub2e4\uba74 \uc0c8\ub85c\uc6b4 \ub3cc\uc744 \ud799\uc5d0 \ucd94\uac00\ud569\ub2c8\ub2e4"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"\ub9c8\uc9c0\ub9c9 \ub3cc\uc774 \ub0a8\uc544\uc788\ub2e4\uba74 \uadf8 \uac12\uc744 \uc591\uc218\ub85c \ubcc0\ud658\ud558\uc5ec \ubc18\ud658\ud558\uace0, \uc5c6\ub2e4\uba74 0\uc744 \ubc18\ud658\ud569\ub2c8\ub2e4"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"\ucc38\uace0 url \uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4."}),"\n",(0,i.jsx)(n.h3,{id:"\ucc38\uace0-\uc790\ub8cc",children:"\ucc38\uace0 \uc790\ub8cc"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://docs.python.org/ko/3/library/heapq.html#heapq.heapify",children:"heapq - Heap queue algorithm"})})]})}function c(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>r});var t=s(6540);const i={},l=t.createContext(i);function o(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);