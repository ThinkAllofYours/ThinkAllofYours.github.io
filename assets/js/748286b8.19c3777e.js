"use strict";(self.webpackChunkthink_allof_yours_github_io=self.webpackChunkthink_allof_yours_github_io||[]).push([[9688],{5831:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"algorithm/binary_tree","title":"\ud83d\ude80 144.\xa0Binary Tree Preorder Traversal","description":"- 144.\xa0Binary Tree Preorder Traversal","source":"@site/docs/algorithm/144_binary_tree.mdx","sourceDirName":"algorithm","slug":"/algorithm/144_binary_tree","permalink":"/docs/algorithm/144_binary_tree","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/algorithm/144_binary_tree.mdx","tags":[{"inline":true,"label":"algorithm","permalink":"/docs/tags/algorithm"},{"inline":true,"label":"binary-tree","permalink":"/docs/tags/binary-tree"},{"inline":true,"label":"preorder-traversal","permalink":"/docs/tags/preorder-traversal"}],"version":"current","sidebarPosition":144,"frontMatter":{"slug":"144_binary_tree","title":"\ud83d\ude80 144.\xa0Binary Tree Preorder Traversal","authors":["bundabergman"],"tags":["algorithm","binary-tree","preorder-traversal"]},"sidebar":"docsSidebar","previous":{"title":"\ud83d\ude80 4.\xa0Median of Two Sorted Arrays","permalink":"/docs/algorithm/4_median_of_two"},"next":{"title":"\ud83d\ude80 452. Minimum Number of Arrows to Burst Balloons","permalink":"/docs/algorithm/452_minimum_number_of_arrows_to_burst_balloons"}}');var o=t(4848),a=t(8453);const s={slug:"144_binary_tree",title:"\ud83d\ude80 144.\xa0Binary Tree Preorder Traversal",authors:["bundabergman"],tags:["algorithm","binary-tree","preorder-traversal"]},i=void 0,l={},d=[];function u(e){const r={a:"a",code:"code",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.strong,{children:"144.\xa0Binary Tree Preorder Traversal"})}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.a,{href:"https://leetcode.com/problems/binary-tree-preorder-traversal/",children:"Binary Tree Preorder Traversal - LeetCode"})}),"\n",(0,o.jsx)(r.p,{children:"\uc774\ub7f0 \ubb38\uc81c\ub294 for\ubb38\uc73c\ub85c \ud574\uacb0\ud558\ub294 \uac83\ubcf4\ub2e4 recursive\ub85c \ud574\uacb0\ud558\ub294 \uac83\uc774 \ubc14\ub78c\uc9c1\ud558\ub2e4\uace0 \uc0dd\uac01\ud588\ub2e4."}),"\n",(0,o.jsx)(r.p,{children:"binary tree\uac00 \ub370\uc774\ud130 \uad6c\uc870\ub85c \uc788\uc73c\uba74 for\ubb38\uc73c\ub85c \ud574\uacb0\ud558\ub294\uac74 \uc5b4\ub835\ub2e4"}),"\n",(0,o.jsx)(r.p,{children:"\uadf8\ub798\uc11c \uc0dd\uac01\ud55c \ucf54\ub4dc\ub294"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-python",children:"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        output = []\n        if root and root.val is not None:\n            output.append(root.val)\n            if root.right or root.left:\n                self.insert_val(output, root.left)\n                self.insert_val(output, root.right)\n        return output\n\n    def insert_val(self, output, root:Optional[TreeNode]):\n        if root is None or root.val is None:\n            return\n\n        output.append(root.val)\n        self.insert_val(output, root.left)\n        self.insert_val(output, root.right)\n"})}),"\n",(0,o.jsx)(r.p,{children:"\uc67c\ucabd\ubd80\ud130 \uc624\ub978\ucabd \uc21c\uc73c\ub85c \ub370\uc774\ud130\ub97c \ub123\uc5b4\uc57c \ud55c\ub2e4."}),"\n",(0,o.jsx)(r.p,{children:"chat.openAi\uc5d0\uac8c \ubb3c\uc5b4\ubd24\ub354\ub2c8"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-python",children:"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def preorderTraversal(self, root: TreeNode) -> List[int]:\n        if not root:\n            return []\n        result = []\n        stack = [root]\n        while stack:\n            node = stack.pop()\n            result.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return result\n"})}),"\n",(0,o.jsx)(r.p,{children:"\uc774\ub807\uac8c \ud480\uc5c8\ub2e4. \uc2e0\ubc15\ud55c \ud480\uc774\ubc95\uc774\ub2e4. \uc544\ub9c8 \ub2e4\ub978 \uc0ac\uc6a9\uc790\ub4e4\uc774 \ud480\uc5b4\ub193\uc740 \ubc29\ubc95 \uc774\uaca0\uc9c0?"}),"\n",(0,o.jsx)(r.p,{children:"\uc5ec\uae30\uc11c\ub294 \uc790\ub8cc\uad6c\uc870\uac00 stack\uc774\uae30 \ub54c\ubb38\uc5d0 \uc624\ub978\ucabd\ubd80\ud130 \uba3c\uc800\ub123\uc5b4\uc57c \uc67c\ucabd\ubd80\ud130 \ub9ac\uc2a4\ud2b8\uc5d0 \ub123\uc744 \uc218\uc788\ub2e4."}),"\n"]}),"\n"]})}function c(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>s,x:()=>i});var n=t(6540);const o={},a=n.createContext(o);function s(e){const r=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);